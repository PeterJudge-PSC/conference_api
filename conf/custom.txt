//------- custom logic create with validate speaker  ---------
	// Add logic to check that the passed Speaker exists in the Speaker table prior to creating the Talk record!!!
        define variable hTalks       as handle    no-undo.                        
        
        find first ttTalk no-lock no-error. 
                    
        run logic/talk/new_talk.p persistent set hTalks.               
        run create_talk in hTalks (input ttTalk.name, input ttTalk.speaker , input ttTalk.abstract , input ttTalk.content_url, input ttTalk.content_type, output ttTalk.id).

        DELETE OBJECT hTalks.
		
//------- custom logic substitute speaker name on read --------        

        // Delegate to get_filtered_talks in read_talks.p
        DEFINE VARIABLE hTalks AS HANDLE  NO-UNDO.
        DEFINE VARIABLE COUNT  AS INTEGER NO-UNDO.

        run logic/talk/read_talks.p persistent set hTalks.               
        run get_filtered_talks in hTalks (input "", input 0, input 0, output table ttTalk, output count).
        
        DELETE OBJECT hTalks.
		
//------- Custom /talks Logic  -------
            ASSIGN topRecs = integer(poRequest:URI:GetQueryValue('top'))
                   skipRecs = integer(poRequest:URI:GetQueryValue('skip'))
                   filter = poRequest:URI:GetQueryValue('filter')
                   record = NEW JsonObject()
                   .
            RUN logic/talk/read_talks.p SINGLE-RUN SET hBusinessLogic.
            RUN get_filtered_talks IN hBusinessLogic (INPUT filter, skipRecs, topRecs, OUTPUT TABLE ttTalk, OUTPUT qryCnt).
            
            BUFFER ttTalk:write-json('JsonObject', record, TRUE).
            
            msgBody:Add('data', record).
            msgBody:Add('count', qryCnt).
			
//------- Custom POST Logic --------
            if     record:Has('name')
               and record:GetType('name') eq JsonDataType:STRING
            then
                assign talkName = record:GetCharacter('name').
            if     record:Has('speaker')
               and record:GetType('speaker') eq JsonDataType:STRING
            then
                assign speaker = record:GetCharacter('speaker').
            if     record:Has('abstract')
               and record:GetType('abstract') eq JsonDataType:STRING
            then
                assign abstract = record:GetCharacter('abstract').
            if     record:Has('contentUrl')
               and record:GetType('contentUrl') eq JsonDataType:STRING
            then
                assign contentUrl = record:GetCharacter('contentUrl').
            if     record:Has('contentType')
               and record:GetType('contentType') eq JsonDataType:STRING
            then
                assign contentType = record:GetCharacter('contentType').
            
            run logic/talk/new_talk.p single-run set hBusinessLogic.
            run create_talk in hBusinessLogic (talkName, speaker, abstract, contentUrl, contentType, 
                                               output talkId).
            
            resp:SetHeader('Location', linkBase + '/' + talkId).
